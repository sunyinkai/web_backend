first: 编写视图函数
在当前应用中的urlconfig:编写路由urls.py
在根urlconfig:指定我们创建的应用的polls.url模块
通过运行 makemigrations 命令，Django 会检测你对模型文件的修改（在这种情况下，你已经取得了新的），并且把修改的部分储存为一次 迁移
views function:
def index(request):
    context=''
    return render(request,'polls/index.html',context)



数据库的基本操作:
>>> from polls.models import Choice, Question  # Import the model classes we just wrote.

# No questions are in the system yet.
>>> Question.objects.all()
>>> from django.utils import timezone
>>> q = Question(question_text="What's new?", pub_date=timezone.now())
# Save the object into the database. You have to call save() explicitly.
>>> q.save()
# Now it has an ID.
>>> q.id
1
>>> q.question_text
"What's new?"
>>> q.pub_date
datetime.datetime(2012, 2, 26, 13, 0, 0, 775217, tzinfo=<UTC>)
# Change values by changing the attributes, then calling save().
>>> q.question_text = "What's up?"
>>> q.save()
# objects.all() displays all the questions in the database.
>>> Question.objects.all()
<QuerySet [<Question: Question object (1)>]>
数据库的操作:增查删改,https://www.w3cschool.cn/django/django-model.html

新建数据库结构:
python manage.py makemigrations
python manage.py migrate

外键的使用:
from django.db import models

class Coding(models.Model):
    text = models.CharField(max_length=10)
    gender = models.IntegerField(unique=True,primary_key = True)
    # 设置性别 gender 为 primary key
class List(models.Model):
    Number = models.IntegerField(unique=True,blank=False, null=False)
    Gender = models.ForeignKey('Coding',on_delete=models.CASCADE)
    # 关联Coding表格
usage:
$ from app002.models import Coding, List        # 引入模型
$ r=Coding(text='男',gender=1)
$ r.save()
$ r1=Coding(text='女',gender=2)
$ r1.save()
字表list:
$ a=List(id=None,Number=1234,Gender=r)  # 上面定义了r=……男……
$ a.save()
正向查询:
a.Gender     ---->其实它的对象是一个Coding
反向查询:
c=Coding.objects.get(text='男')
c.list_set.all() #通过foreignkey在子表list中查找女生,这里有详解:   https://paste.ubuntu.com/p/sJvpRPSdg2/



往模板里传参数:
    List=['A','B']
    Dict={'A':'a','B':'b'}
    context={
        # 'List':json.dumps(List),
        # 'Dict':json.dumps(Dict)
        'List':List,
        'Dict':Dict,
    }
    return render(request,'polls/index.html',context)

django重定向:
HttpResponseRedirect
https://blog.csdn.net/orangleliu/article/details/38347863




feature:
默认情况下，Django会在model名的前面加上你的“应用的名称_”作为数据库表的名称。
比如你的应用是polls，定一个了一个model叫做Person，那么数据库表的名称是polls_person
默认情况下，Django汇给你自动增加一个叫做id的字段，并设置这个字段为主键。

增:
Host.objects.create(hostname='host1.test.com',port=80)
u=Host(hostname='abc',port=80)u.save()

查:
t = User.objects.filter(username=username) #会返回一个含object的list,如果没有list为空
t = User.objects.get(username=username) #如果找不到会抛出异常
t = User.objects.all()
t = User.objects.filter(userprofile__level__lte=0) #查找小于等于0的,而不是userprofile__level <= 0
t = User.objects.filter(userprofile__level__gte=0) #查找大于等于0的

删:

改:

关系:
一对多:
class Coding(models.Model):
    text=models.CharField(max_length=10)
    gender=models.IntegerField(unique=True,primary_key=True)
class List(models.Model):
    Number=models.IntegerField(unique=True,blank=False,null=False)
    Gender=models.ForeignKey('Coding',on_delete=models.CASCADE)
正向查找:
a.Gender   --->其实他是一个coding对象
反向查找:
c=Coding.objects.get(text='男')
c.list_set.all()
----------------------------------------
多对多:
ManyToManyField在哪,对那边的查询就叫正向查询
class Host(models.Model):
    hostname = models.CharField(max_length=32)
    port = models.IntegerField()

class HostAdmin(models.Model):
    username = models.CharField(max_length=32)
    email = models.CharField(max_length=32)
    host = models.ManyToManyField(Host)

正向添加:
为管理员添加主机
admin_obj = HostAdmin.objects.get(username='dali') id=2
host_list = Host.objects.filter(id__lt=3) id=1,2
admin_obj.host.add(*host_list)
正向查询:
>>> admin_obj = HostAdmin.objects.get(username='dali')
>>> host_obj = admin_obj.host.all()
>>> for host_line in host_obj:
...     print host_line.hostname
反向添加
为主机添加管理员
与一对多操作一样,反向操作获取数据的时候我们需要用到xxx_set的方法跨表获得关联表的数据。
host_obj = Host.objects.get(id=3)
admin_list = HostAdmin.objects.filter(username='alex')
host_obj.hostadmin_set.add(*admin_list)
反向查询:
>>> host_obj = Host.objects.get(hostname='host1.test.com')
>>> admin_obj = host_obj.hostadmin_set.all()
>>> for admin_line in admin_obj:
...     print admin_line.username

----------------------------------------
class Host(models.Model):
    hostname = models.CharField(max_length=32)
    port = models.IntegerField()

class HostAdmin(models.Model):
    username = models.CharField(max_length=32)
    email = models.CharField(max_length=32)

    #through告诉Django用那张表做关联
    host = models.ManyToManyField(Host , through='HostRelation')

class HostRelation(models.Model):
    host = models.ForeignKey('Host')
    hostadmin = models.ForeignKey('HostAdmin')
添加数据:
admin_obj = HostAdmin.objects.get(username='alex')
host_obj = Host.objects.filter(id__gt=2)
>>> for host_line in host_obj:
...     HostRelation.objects.create(hostadmin=admin_obj, host=host_line)
查询数据:
>>> admin_obj=HostRelation.objects.filter(host__hostname='host3.test.com').select_related()
>>> for admin_line in admin_obj:
...     print admin_line.hostadmin.username

通过HostRelation表，怎么查询都是正向查询。非常方便，所以一般处理多对多关系的时候建议自己创建关系表


-------------
undo

django 静态文件
django 数据库多对多
登录:

动态的发布:
    如果是当前用户的发表的动态,用户可以修改,删除,
评论子系统:
    如果是当前用户的评论,